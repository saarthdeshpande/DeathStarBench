apiVersion: v1
kind: Service
metadata:
  name: post-storage-memcached
spec:
  ports:
  - name: '11211'
    port: 11211
    targetPort: 11211
  selector:
    service: post-storage-memcached
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: post-storage-memcached
  name: post-storage-memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      service: post-storage-memcached
  template:
    metadata:
      labels:
        app: post-storage-memcached
        service: post-storage-memcached
    spec:
      containers:
      - image: docker.io/library/memcached:1.6.7
        imagePullPolicy: IfNotPresent
        name: post-storage-memcached
        ports:
        - containerPort: 11211
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: post-storage-memcached-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: post-storage-memcached-config
          subPath: service-config.json
      hostname: post-storage-memcached
      restartPolicy: Always
      volumes:
      - configMap:
          name: post-storage-memcached
        name: post-storage-memcached-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: post-storage-memcached
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: post-storage-memcached
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: post-storage-memcached
  name: post-storage-memcached
---
apiVersion: v1
kind: Service
metadata:
  name: user-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: user-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-mongodb
  name: user-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-mongodb
  template:
    metadata:
      labels:
        app: user-mongodb
        service: user-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: user-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: user-mongodb-config
          subPath: mongod.conf
      hostname: user-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-mongodb
        name: user-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-mongodb
  name: user-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: text-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: text-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: text-service
  name: text-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: text-service
  template:
    metadata:
      labels:
        app: text-service
        service: text-service
    spec:
      containers:
      - command:
        - TextService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: text-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: text-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: text-service-config
          subPath: service-config.json
      hostname: text-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: text-service
        name: text-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: text-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: text-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: text-service
  name: text-service
---
apiVersion: v1
kind: Service
metadata:
  name: user-memcached
spec:
  ports:
  - name: '11211'
    port: 11211
    targetPort: 11211
  selector:
    service: user-memcached
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-memcached
  name: user-memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-memcached
  template:
    metadata:
      labels:
        app: user-memcached
        service: user-memcached
    spec:
      containers:
      - image: docker.io/library/memcached:1.6.7
        imagePullPolicy: IfNotPresent
        name: user-memcached
        ports:
        - containerPort: 11211
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: user-memcached-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: user-memcached-config
          subPath: service-config.json
      hostname: user-memcached
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-memcached
        name: user-memcached-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-memcached
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-memcached
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-memcached
  name: user-memcached
---
apiVersion: v1
kind: Service
metadata:
  name: unique-id-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: unique-id-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: unique-id-service
  name: unique-id-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: unique-id-service
  template:
    metadata:
      labels:
        app: unique-id-service
        service: unique-id-service
    spec:
      containers:
      - command:
        - UniqueIdService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: unique-id-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: unique-id-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: unique-id-service-config
          subPath: service-config.json
      hostname: unique-id-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: unique-id-service
        name: unique-id-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: unique-id-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: unique-id-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: unique-id-service
  name: unique-id-service
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger
spec:
  ports:
  - name: '5775'
    port: 5775
    protocol: UDP
    targetPort: 5775
  - name: '6831'
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: '6832'
    port: 6832
    protocol: UDP
    targetPort: 6832
  - name: '5778'
    port: 5778
    targetPort: 5778
  - name: '16685'
    port: 16685
    targetPort: 16685
  - name: '16686'
    port: 16686
    targetPort: 16686
  - name: '14268'
    port: 14268
    targetPort: 14268
  - name: '9411'
    port: 9411
    targetPort: 9411
  selector:
    service: jaeger
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: jaeger
  name: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      service: jaeger
  template:
    metadata:
      labels:
        app: jaeger
        service: jaeger
    spec:
      containers:
      - env:
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          value: '9411'
        image: docker.io/jaegertracing/all-in-one:latest
        imagePullPolicy: IfNotPresent
        name: jaeger
        ports:
        - containerPort: 5775
        - containerPort: 6831
        - containerPort: 6832
        - containerPort: 5778
        - containerPort: 16685
        - containerPort: 16686
        - containerPort: 14268
        - containerPort: 9411
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: jaeger-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: jaeger-config
          subPath: service-config.json
      hostname: jaeger
      restartPolicy: Always
      volumes:
      - configMap:
          name: jaeger
        name: jaeger-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jaeger
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jaeger
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: jaeger
  name: jaeger
---
apiVersion: v1
kind: Service
metadata:
  name: post-storage-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: post-storage-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: post-storage-mongodb
  name: post-storage-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: post-storage-mongodb
  template:
    metadata:
      labels:
        app: post-storage-mongodb
        service: post-storage-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: post-storage-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: post-storage-mongodb-config
          subPath: mongod.conf
      hostname: post-storage-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: post-storage-mongodb
        name: post-storage-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: post-storage-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: post-storage-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: post-storage-mongodb
  name: post-storage-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-thrift
spec:
  ports:
  - name: '8080'
    nodePort: 32000
    port: 8080
    targetPort: 8080
  selector:
    service: nginx-thrift
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: nginx-thrift
  name: nginx-thrift
spec:
  replicas: 1
  selector:
    matchLabels:
      service: nginx-thrift
  template:
    metadata:
      labels:
        app: nginx-thrift
        service: nginx-thrift
    spec:
      containers:
      - env:
        - name: fqdn_suffix
          value: .default.svc.cluster.local
        image: docker.io/yg397/openresty-thrift:xenial
        imagePullPolicy: IfNotPresent
        name: nginx-thrift
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /usr/local/openresty/nginx/jaeger-config.json
          name: nginx-thrift-config
          subPath: jaeger-config.json
        - mountPath: /usr/local/openresty/nginx/conf/nginx.conf
          name: nginx-thrift-config
          subPath: nginx.conf
        - mountPath: /usr/local/openresty/nginx/lua-scripts
          name: lua-scripts
        - mountPath: /usr/local/openresty/lualib/thrift
          name: lua-thrift
        - mountPath: /usr/local/openresty/nginx/pages
          name: pages
        - mountPath: /gen-lua
          name: gen-lua
        - mountPath: /keys
          name: keys
      hostname: nginx-thrift
      initContainers:
      - args:
        - -c
        - git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench && cp -r /DeathStarBench/socialNetwork/gen-lua/* /gen-lua/ && cp -r /DeathStarBench/socialNetwork/docker/openresty-thrift/lua-thrift/* /lua-thrift/ && cp -r /DeathStarBench/socialNetwork/nginx-web-server/lua-scripts/* /lua-scripts/ && cp -r /DeathStarBench/socialNetwork/nginx-web-server/pages/* /pages/ && cp /DeathStarBench/socialNetwork/keys/* /keys/
        command:
        - /bin/sh
        image: docker.io/alpine/git:latest
        imagePullPolicy: IfNotPresent
        name: alpine-container
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /lua-scripts
          name: lua-scripts
        - mountPath: /lua-thrift
          name: lua-thrift
        - mountPath: /pages
          name: pages
        - mountPath: /gen-lua
          name: gen-lua
        - mountPath: /keys
          name: keys
      restartPolicy: Always
      volumes:
      - configMap:
          name: nginx-thrift
        name: nginx-thrift-config
      - emptyDir: {}
        name: lua-scripts
      - emptyDir: {}
        name: pages
      - emptyDir: {}
        name: gen-lua
      - emptyDir: {}
        name: lua-thrift
      - emptyDir: {}
        name: keys
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-thrift
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-thrift
---
apiVersion: v1
data:
  jaeger-config.json: |
    {
      "service_name": "nginx-web-server",
      "disabled": false,
      "reporter": {
        "logSpans": false,
        "localAgentHostPort": "jaeger:6831",
        "queueSize": 1000000,
        "bufferFlushInterval": 10
      },
      "sampler": {
        "type": "probabilistic",
        "param": 0.01
      }
    }
  nginx.conf: "# Load the OpenTracing dynamic module.\nload_module modules/ngx_http_opentracing_module.so;\n\n# Checklist: Make sure that worker_processes == #cores you gave to\n# nginx process\nworker_processes  auto;\n\n# error_log  logs/error.log;\n\n# Checklist: Make sure that worker_connections * worker_processes\n# is greater than the total connections between the client and Nginx. \nevents {\n  use epoll;\n  worker_connections  1024;\n}\n\nenv fqdn_suffix;\n\nhttp {\n  # Load a vendor tracer\n  opentracing on;\n  opentracing_load_tracer /usr/local/lib/libjaegertracing_plugin.so /usr/local/openresty/nginx/jaeger-config.json;\n\n  include       mime.types;\n  default_type  application/octet-stream;\n\n  proxy_read_timeout 5000;\n  proxy_connect_timeout 5000;\n  proxy_send_timeout 5000;\n  \n  log_format main '$remote_addr - $remote_user [$time_local] \"$request\"'\n                  '$status $body_bytes_sent \"$http_referer\" '\n                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  # access_log  logs/access.log  main;\n\n  sendfile        on;\n  tcp_nopush      on;\n  tcp_nodelay     on;\n\n  # Checklist: Make sure the keepalive_timeout is greateer than\n  # the duration of your experiment and keepalive_requests\n  # is greateer than the total number of requests sent from\n  # the workload generator\n  keepalive_timeout  120s;\n  keepalive_requests 100000;\n\n  # Docker default hostname resolver. Set valid timeout to prevent unlimited\n  # ttl for resolver caching.\n  # resolver 127.0.0.11 valid=10s ipv6=off;\n  resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;\n\n  lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';\n\n  lua_shared_dict config 32k;\n\n  init_by_lua_block {\n    local bridge_tracer = require \"opentracing_bridge_tracer\"\n    local GenericObjectPool = require \"GenericObjectPool\"\n    local ngx = ngx\n    local jwt = require \"resty.jwt\"\n    local cjson = require 'cjson'\n\n    local social_network_UserTimelineService = require 'social_network_UserTimelineService'\n    local UserTimelineServiceClient = social_network_UserTimelineService.social_network_UserTimelineService\n    local social_network_SocialGraphService = require 'social_network_SocialGraphService'\n    local SocialGraphServiceClient = social_network_SocialGraphService.SocialGraphServiceClient\n    local social_network_ComposePostService = require 'social_network_ComposePostService'\n    local ComposePostServiceClient = social_network_ComposePostService.ComposePostServiceClient\n    local social_network_UserService = require 'social_network_UserService'\n    local UserServiceClient = social_network_UserService.UserServiceClient\n\n\n    local config = ngx.shared.config;\n    config:set(\"secret\", \"secret\")\n    config:set(\"cookie_ttl\", 3600 * 24)\n    config:set(\"ssl\", false)\n  }\n\n  server {\n\n    # Checklist: Set up the port that nginx listens to.\n    listen       8080 reuseport;\n    server_name  localhost;\n\n    # Checklist: Turn of the access_log and error_log if you\n    # don't need them.\n    access_log  off;\n    # error_log off;\n\n    lua_need_request_body on;\n\n    # Used when SSL enabled\n    lua_ssl_trusted_certificate /keys/CA.pem;\n    lua_ssl_ciphers ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH;\n\n    # Checklist: Make sure that the location here is consistent\n    # with the location you specified in wrk2.\n    location /api/user/register {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header\
    \ 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/register\"\n          client.RegisterUser();\n      ';\n    }\n\n    location /api/user/follow {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/follow\"\n          client.Follow();\n      ';\n    }\n\n    location /api/user/unfollow {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/unfollow\"\n          client.Unfollow();\n      ';\n    }\n\n    location /api/user/login {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin'\
    \ '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/login\"\n          client.Login();\n      ';\n    }\n\n    location /api/post/compose {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/post/compose\"\n          client.ComposePost();\n      ';\n    }\n\n    location /api/user-timeline/read {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST,\
    \ OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user-timeline/read\"\n          client.ReadUserTimeline();\n      ';\n    }\n\n    location /api/home-timeline/read {\n            if ($request_method = 'OPTIONS') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Max-Age' 1728000;\n              add_header 'Content-Type' 'text/plain; charset=utf-8';\n              add_header 'Content-Length' 0;\n              return 204;\n            }\n            if ($request_method = 'POST') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n            }\n            if ($request_method = 'GET') {\n              add_header 'Access-Control-Allow-Origin' '*';\n              add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n              add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n              add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n            }\n      content_by_lua '\n          local client = require \"api/home-timeline/read\"\n          client.ReadHomeTimeline();\n      ';\n    }\n\n    # # get userinfo lua\n    # location /api/user/user_info {\n    #       if ($request_method = 'OPTIONS') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Max-Age' 1728000;\n    #         add_header 'Content-Type' 'text/plain; charset=utf-8';\n    #         add_header 'Content-Length' 0;\n    #         return 204;\n    #       }\n    #       if ($request_method = 'POST') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n    #       }\n    #       if ($request_method = 'GET') {\n    #         add_header 'Access-Control-Allow-Origin' '*';\n    #         add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n    #         add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n    #         add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n    #       }\n    #   content_by_lua '\n    #       local client = require \"api/user/user_info\"\n    #       client.UserInfo();\n    #   ';\n    # }\n    # get follower lua\n    location /api/user/get_follower {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain;\
    \ charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/get_follower\"\n          client.GetFollower();\n      ';\n    }\n\n    # get followee lua\n    location /api/user/get_followee {\n          if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n          }\n          if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n          if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n          }\n      content_by_lua '\n          local client = require \"api/user/get_followee\"\n          client.GetFollowee();\n      ';\n    }\n    location / {\n      if ($request_method = 'OPTIONS') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Content-Type' 'text/plain; charset=utf-8';\n        add_header 'Content-Length' 0;\n        return 204;\n      }\n      if ($request_method = 'POST') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n      }\n      if ($request_method = 'GET') {\n        add_header 'Access-Control-Allow-Origin' '*';\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';\n      }\n      root pages;\n    }\n\n    location /wrk2-api/home-timeline/read {\n      content_by_lua '\n          local client = require \"wrk2-api/home-timeline/read\"\
    \n          client.ReadHomeTimeline();\n      ';\n    }\n\n    location /wrk2-api/user-timeline/read {\n      content_by_lua '\n          local client = require \"wrk2-api/user-timeline/read\"\n          client.ReadUserTimeline();\n      ';\n    }\n\n    location /wrk2-api/post/compose {\n      content_by_lua '\n          local client = require \"wrk2-api/post/compose\"\n          client.ComposePost();\n      ';\n    }\n\n    location /wrk2-api/user/register {\n      content_by_lua '\n          local client = require \"wrk2-api/user/register\"\n          client.RegisterUser();\n      ';\n    }\n\n    location /wrk2-api/user/follow {\n      content_by_lua '\n          local client = require \"wrk2-api/user/follow\"\n          client.Follow();\n      ';\n    }\n\n    location /wrk2-api/user/unfollow {\n      content_by_lua '\n          local client = require \"wrk2-api/user/unfollow\"\n          client.Unfollow();\n      ';\n    }\n\n  }\n}\n"
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: nginx-thrift
  name: nginx-thrift
---
apiVersion: v1
kind: Service
metadata:
  name: media-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: media-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: media-service
  name: media-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: media-service
  template:
    metadata:
      labels:
        app: media-service
        service: media-service
    spec:
      containers:
      - command:
        - MediaService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: media-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: media-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: media-service-config
          subPath: service-config.json
      hostname: media-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: media-service
        name: media-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: media-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: media-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: media-service
  name: media-service
---
apiVersion: v1
kind: Service
metadata:
  name: user-timeline-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: user-timeline-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-timeline-service
  name: user-timeline-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-timeline-service
  template:
    metadata:
      labels:
        app: user-timeline-service
        service: user-timeline-service
    spec:
      containers:
      - command:
        - UserTimelineService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: user-timeline-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: user-timeline-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: user-timeline-service-config
          subPath: service-config.json
      hostname: user-timeline-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-timeline-service
        name: user-timeline-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-timeline-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-timeline-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-timeline-service
  name: user-timeline-service
---
apiVersion: v1
kind: Service
metadata:
  name: compose-post-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: compose-post-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: compose-post-service
  name: compose-post-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: compose-post-service
  template:
    metadata:
      labels:
        app: compose-post-service
        service: compose-post-service
    spec:
      containers:
      - command:
        - ComposePostService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: compose-post-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: compose-post-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: compose-post-service-config
          subPath: service-config.json
      hostname: compose-post-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: compose-post-service
        name: compose-post-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: compose-post-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compose-post-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: compose-post-service
  name: compose-post-service
---
apiVersion: v1
kind: Service
metadata:
  name: social-graph-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: social-graph-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: social-graph-mongodb
  name: social-graph-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: social-graph-mongodb
  template:
    metadata:
      labels:
        app: social-graph-mongodb
        service: social-graph-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: social-graph-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: social-graph-mongodb-config
          subPath: mongod.conf
      hostname: social-graph-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: social-graph-mongodb
        name: social-graph-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: social-graph-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: social-graph-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: social-graph-mongodb
  name: social-graph-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: user-mention-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: user-mention-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-mention-service
  name: user-mention-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-mention-service
  template:
    metadata:
      labels:
        app: user-mention-service
        service: user-mention-service
    spec:
      containers:
      - command:
        - UserMentionService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: user-mention-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: user-mention-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: user-mention-service-config
          subPath: service-config.json
      hostname: user-mention-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-mention-service
        name: user-mention-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-mention-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-mention-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-mention-service
  name: user-mention-service
---
apiVersion: v1
kind: Service
metadata:
  name: media-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: media-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: media-mongodb
  name: media-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: media-mongodb
  template:
    metadata:
      labels:
        app: media-mongodb
        service: media-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: media-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: media-mongodb-config
          subPath: mongod.conf
      hostname: media-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: media-mongodb
        name: media-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: media-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: media-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: media-mongodb
  name: media-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: home-timeline-redis
spec:
  ports:
  - name: '6379'
    port: 6379
    targetPort: 6379
  selector:
    service: home-timeline-redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: home-timeline-redis
  name: home-timeline-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: home-timeline-redis
  template:
    metadata:
      labels:
        app: home-timeline-redis
        service: home-timeline-redis
    spec:
      containers:
      - args:
        - /social-network-microservices/config/redis.conf
        image: docker.io/library/redis:6.2.4
        imagePullPolicy: IfNotPresent
        name: home-timeline-redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/redis.conf
          name: home-timeline-redis-config
          subPath: redis.conf
      hostname: home-timeline-redis
      restartPolicy: Always
      volumes:
      - configMap:
          name: home-timeline-redis
        name: home-timeline-redis-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: home-timeline-redis
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: home-timeline-redis
---
apiVersion: v1
data:
  redis.conf: |
    io-threads 8
    io-threads-do-reads yes
    port 6379
    tls-port 0

    tls-cert-file /keys/server.crt
    tls-key-file /keys/server.key

    tls-auth-clients no
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: home-timeline-redis
  name: home-timeline-redis
---
apiVersion: v1
kind: Service
metadata:
  name: social-graph-redis
spec:
  ports:
  - name: '6379'
    port: 6379
    targetPort: 6379
  selector:
    service: social-graph-redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: social-graph-redis
  name: social-graph-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: social-graph-redis
  template:
    metadata:
      labels:
        app: social-graph-redis
        service: social-graph-redis
    spec:
      containers:
      - args:
        - /social-network-microservices/config/redis.conf
        image: docker.io/library/redis:6.2.4
        imagePullPolicy: IfNotPresent
        name: social-graph-redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/redis.conf
          name: social-graph-redis-config
          subPath: redis.conf
      hostname: social-graph-redis
      restartPolicy: Always
      volumes:
      - configMap:
          name: social-graph-redis
        name: social-graph-redis-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: social-graph-redis
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: social-graph-redis
---
apiVersion: v1
data:
  redis.conf: |
    io-threads 8
    io-threads-do-reads yes
    port 6379
    tls-port 0

    tls-cert-file /keys/server.crt
    tls-key-file /keys/server.key

    tls-auth-clients no
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: social-graph-redis
  name: social-graph-redis
---
apiVersion: v1
kind: Service
metadata:
  name: url-shorten-memcached
spec:
  ports:
  - name: '11211'
    port: 11211
    targetPort: 11211
  selector:
    service: url-shorten-memcached
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: url-shorten-memcached
  name: url-shorten-memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      service: url-shorten-memcached
  template:
    metadata:
      labels:
        app: url-shorten-memcached
        service: url-shorten-memcached
    spec:
      containers:
      - image: docker.io/library/memcached:1.6.7
        imagePullPolicy: IfNotPresent
        name: url-shorten-memcached
        ports:
        - containerPort: 11211
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: url-shorten-memcached-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: url-shorten-memcached-config
          subPath: service-config.json
      hostname: url-shorten-memcached
      restartPolicy: Always
      volumes:
      - configMap:
          name: url-shorten-memcached
        name: url-shorten-memcached-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: url-shorten-memcached
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: url-shorten-memcached
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: url-shorten-memcached
  name: url-shorten-memcached
---
apiVersion: v1
kind: Service
metadata:
  name: url-shorten-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: url-shorten-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: url-shorten-service
  name: url-shorten-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: url-shorten-service
  template:
    metadata:
      labels:
        app: url-shorten-service
        service: url-shorten-service
    spec:
      containers:
      - command:
        - UrlShortenService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: url-shorten-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: url-shorten-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: url-shorten-service-config
          subPath: service-config.json
      hostname: url-shorten-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: url-shorten-service
        name: url-shorten-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: url-shorten-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: url-shorten-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: url-shorten-service
  name: url-shorten-service
---
apiVersion: v1
kind: Service
metadata:
  name: social-graph-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: social-graph-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: social-graph-service
  name: social-graph-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: social-graph-service
  template:
    metadata:
      labels:
        app: social-graph-service
        service: social-graph-service
    spec:
      containers:
      - command:
        - SocialGraphService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: social-graph-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: social-graph-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: social-graph-service-config
          subPath: service-config.json
      hostname: social-graph-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: social-graph-service
        name: social-graph-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: social-graph-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: social-graph-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: social-graph-service
  name: social-graph-service
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: user-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-service
  name: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-service
  template:
    metadata:
      labels:
        app: user-service
        service: user-service
    spec:
      containers:
      - command:
        - UserService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: user-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: user-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: user-service-config
          subPath: service-config.json
      hostname: user-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-service
        name: user-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-service
  name: user-service
---
apiVersion: v1
kind: Service
metadata:
  name: media-frontend
spec:
  ports:
  - name: '8081'
    port: 8081
    targetPort: 8080
  selector:
    service: media-frontend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: media-frontend
  name: media-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      service: media-frontend
  template:
    metadata:
      labels:
        app: media-frontend
        service: media-frontend
    spec:
      containers:
      - env:
        - name: fqdn_suffix
          value: .default.svc.cluster.local
        image: docker.io/yg397/media-frontend:xenial
        imagePullPolicy: IfNotPresent
        name: media-frontend
        ports:
        - containerPort: 8081
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /usr/local/openresty/nginx/conf/nginx.conf
          name: media-frontend-config
          subPath: nginx.conf
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: media-frontend-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: media-frontend-config
          subPath: service-config.json
        - mountPath: /usr/local/openresty/nginx/lua-scripts
          name: lua-scripts
      hostname: media-frontend
      initContainers:
      - args:
        - -c
        - git clone https://github.com/delimitrou/DeathStarBench.git /DeathStarBench && cp -r /DeathStarBench/socialNetwork/media-frontend/lua-scripts/* /lua-scripts/
        command:
        - /bin/sh
        image: docker.io/alpine/git:latest
        imagePullPolicy: IfNotPresent
        name: alpine-container
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /lua-scripts
          name: lua-scripts
      restartPolicy: Always
      volumes:
      - configMap:
          name: media-frontend
        name: media-frontend-config
      - emptyDir: {}
        name: lua-scripts
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: media-frontend
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: media-frontend
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  nginx.conf: |
    # Checklist: Make sure that worker_processes == #cores you gave to
    # nginx process
    worker_processes  16;

    # error_log  logs/error.log;

    # Checklist: Make sure that worker_connections * worker_processes
    # is greater than the total connections between the client and Nginx.
    events {
      worker_connections  1024;
    }

    env fqdn_suffix;

    http {
      include       mime.types;
      default_type  application/octet-stream;

      log_format main '$remote_addr - $remote_user [$time_local] "$request"'
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      # access_log  logs/access.log  main;

      sendfile        on;
      tcp_nopush      on;
      tcp_nodelay     on;

      # Checklist: Make sure the keepalive_timeout is greateer than
      # the duration of your experiment and keepalive_requests
      # is greateer than the total number of requests sent from
      # the workload generator
      keepalive_timeout  120s;
      keepalive_requests 100000;

      # Docker default hostname resolver
      resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;

      lua_package_path '/usr/local/openresty/nginx/lua-scripts/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;;';

      lua_shared_dict config 32k;

      init_by_lua_block {
        local upload = require "resty.upload"
        local memcached = require "resty.memcached"
        local mongo = require "resty-mongol"
      }

      server {

        # Checklist: Set up the port that nginx listens to.
        listen       8080 reuseport;
        server_name  localhost;

        # Checklist: Turn of the access_log and error_log if you
        # don't need them.
        access_log  off;
        # error_log off;

        client_max_body_size 100M;
        client_body_buffer_size 100M;

        # Checklist: Make sure that the location here is consistent
        # with the location you specified in wrk2.
        location /upload-media {
              if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
              }
              if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
              }
              if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
              }
          content_by_lua '
            local client = require "upload-media"
            client.UploadMedia();
          ';
        }

        # Checklist: Make sure that the location here is consistent
        # with the location you specified in wrk2.
        location /get-media {
              if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
              }
              if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
              }
              if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
              }
          content_by_lua '
            local client = require "get-media"
            client.GetMedia();
          ';
        }

      }
    }
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: media-frontend
  name: media-frontend
---
apiVersion: v1
kind: Service
metadata:
  name: user-timeline-redis
spec:
  ports:
  - name: '6379'
    port: 6379
    targetPort: 6379
  selector:
    service: user-timeline-redis
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-timeline-redis
  name: user-timeline-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-timeline-redis
  template:
    metadata:
      labels:
        app: user-timeline-redis
        service: user-timeline-redis
    spec:
      containers:
      - args:
        - /social-network-microservices/config/redis.conf
        image: docker.io/library/redis:6.2.4
        imagePullPolicy: IfNotPresent
        name: user-timeline-redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/redis.conf
          name: user-timeline-redis-config
          subPath: redis.conf
      hostname: user-timeline-redis
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-timeline-redis
        name: user-timeline-redis-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-timeline-redis
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-timeline-redis
---
apiVersion: v1
data:
  redis.conf: |
    io-threads 8
    io-threads-do-reads yes
    port 6379
    tls-port 0

    tls-cert-file /keys/server.crt
    tls-key-file /keys/server.key

    tls-auth-clients no
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-timeline-redis
  name: user-timeline-redis
---
apiVersion: v1
kind: Service
metadata:
  name: url-shorten-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: url-shorten-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: url-shorten-mongodb
  name: url-shorten-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: url-shorten-mongodb
  template:
    metadata:
      labels:
        app: url-shorten-mongodb
        service: url-shorten-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: url-shorten-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: url-shorten-mongodb-config
          subPath: mongod.conf
      hostname: url-shorten-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: url-shorten-mongodb
        name: url-shorten-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: url-shorten-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: url-shorten-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: url-shorten-mongodb
  name: url-shorten-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: media-memcached
spec:
  ports:
  - name: '11211'
    port: 11211
    targetPort: 11211
  selector:
    service: media-memcached
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: media-memcached
  name: media-memcached
spec:
  replicas: 1
  selector:
    matchLabels:
      service: media-memcached
  template:
    metadata:
      labels:
        app: media-memcached
        service: media-memcached
    spec:
      containers:
      - image: docker.io/library/memcached:1.6.7
        imagePullPolicy: IfNotPresent
        name: media-memcached
        ports:
        - containerPort: 11211
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: media-memcached-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: media-memcached-config
          subPath: service-config.json
      hostname: media-memcached
      restartPolicy: Always
      volumes:
      - configMap:
          name: media-memcached
        name: media-memcached-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: media-memcached
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: media-memcached
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: media-memcached
  name: media-memcached
---
apiVersion: v1
kind: Service
metadata:
  name: home-timeline-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: home-timeline-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: home-timeline-service
  name: home-timeline-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: home-timeline-service
  template:
    metadata:
      labels:
        app: home-timeline-service
        service: home-timeline-service
    spec:
      containers:
      - command:
        - HomeTimelineService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: home-timeline-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: home-timeline-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: home-timeline-service-config
          subPath: service-config.json
      hostname: home-timeline-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: home-timeline-service
        name: home-timeline-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: home-timeline-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: home-timeline-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: home-timeline-service
  name: home-timeline-service
---
apiVersion: v1
kind: Service
metadata:
  name: user-timeline-mongodb
spec:
  ports:
  - name: '27017'
    port: 27017
    targetPort: 27017
  selector:
    service: user-timeline-mongodb
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: user-timeline-mongodb
  name: user-timeline-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      service: user-timeline-mongodb
  template:
    metadata:
      labels:
        app: user-timeline-mongodb
        service: user-timeline-mongodb
    spec:
      containers:
      - args:
        - --config
        - /social-network-microservices/config/mongod.conf
        image: docker.io/library/mongo:4.4.6
        imagePullPolicy: IfNotPresent
        name: user-timeline-mongodb
        ports:
        - containerPort: 27017
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/mongod.conf
          name: user-timeline-mongodb-config
          subPath: mongod.conf
      hostname: user-timeline-mongodb
      restartPolicy: Always
      volumes:
      - configMap:
          name: user-timeline-mongodb
        name: user-timeline-mongodb-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-timeline-mongodb
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-timeline-mongodb
---
apiVersion: v1
data:
  mongod.conf: |
    net:
      tls:
        mode: disabled
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: user-timeline-mongodb
  name: user-timeline-mongodb
---
apiVersion: v1
kind: Service
metadata:
  name: post-storage-service
spec:
  ports:
  - name: '9090'
    port: 9090
    targetPort: 9090
  selector:
    service: post-storage-service
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    service: post-storage-service
  name: post-storage-service
spec:
  replicas: 1
  selector:
    matchLabels:
      service: post-storage-service
  template:
    metadata:
      labels:
        app: post-storage-service
        service: post-storage-service
    spec:
      containers:
      - command:
        - PostStorageService
        image: docker.io/deathstarbench/social-network-microservices:latest
        imagePullPolicy: IfNotPresent
        name: post-storage-service
        ports:
        - containerPort: 9090
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 500m
            memory: 128Mi
        volumeMounts:
        - mountPath: /social-network-microservices/config/jaeger-config.yml
          name: post-storage-service-config
          subPath: jaeger-config.yml
        - mountPath: /social-network-microservices/config/service-config.json
          name: post-storage-service-config
          subPath: service-config.json
      hostname: post-storage-service
      restartPolicy: Always
      volumes:
      - configMap:
          name: post-storage-service
        name: post-storage-service-config
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: post-storage-service
spec:
  maxReplicas: 5
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  minReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: post-storage-service
---
apiVersion: v1
data:
  jaeger-config.yml: |
    disabled: false
    reporter:
      logSpans: false
      localAgentHostPort: "jaeger:6831"
      queueSize: 1000000
      bufferFlushInterval: 10
    sampler:
      type: "probabilistic"
      param: 0.01
  service-config.json: |
    {
        "secret": "secret",
        "social-graph-service": {
          "addr": "social-graph-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-mongodb": {
          "addr": "social-graph-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "social-graph-redis": {
          "addr": "social-graph-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "write-home-timeline-service": {
          "addr": "write-home-timeline-service",
          "port": 9090,
          "workers": 32,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "write-home-timeline-rabbitmq": {
          "addr": "write-home-timeline-rabbitmq",
          "port": 5672,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-redis": {
          "addr": "home-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "compose-post-service": {
          "addr": "compose-post-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "compose-post-redis": {
          "addr": "compose-post-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "user-timeline-service": {
          "addr": "user-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-mongodb": {
          "addr": "user-timeline-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-timeline-redis": {
          "addr": "user-timeline-redis",
          "port": 6379,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "use_cluster": 0,
          "use_replica": 0
        },
        "post-storage-service": {
          "addr": "post-storage-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-mongodb": {
          "addr": "post-storage-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "post-storage-memcached": {
          "addr": "post-storage-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "unique-id-service": {
          "addr": "unique-id-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "media-service": {
          "addr": "media-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-mongodb": {
          "addr": "media-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "media-memcached": {
          "addr": "media-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "media-frontend": {
          "addr": "media-frontend",
          "port": 8081,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "text-service": {
          "addr": "text-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-mention-service": {
          "addr": "user-mention-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-service": {
          "addr": "url-shorten-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "url-shorten-memcached": {
          "addr": "url-shorten-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "url-shorten-mongodb": {
          "addr": "url-shorten-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "user-service": {
          "addr": "user-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "netif": "eth0"
        },
        "user-memcached": {
          "addr": "user-memcached",
          "port": 11211,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000,
          "binary_protocol": 1
        },
        "user-mongodb": {
          "addr": "user-mongodb",
          "port": 27017,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "home-timeline-service": {
          "addr": "home-timeline-service",
          "port": 9090,
          "connections": 512,
          "timeout_ms": 10000,
          "keepalive_ms": 10000
        },
        "ssl": {
          "enabled": false,
          "caPath": "/keys/CA.pem",
          "ciphers": "ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH",
          "serverKeyPath": "/keys/server.key",
          "serverCertPath": "/keys/server.crt"
        },
        "redis-primary": {
          "keepalive_ms": 10000,
          "addr": "redis-master",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        },
        "redis-replica": {
          "keepalive_ms": 10000,
          "addr": "redis-replicas",
          "timeout_ms": 10000,
          "port": 6379,
          "connections": 512
        }
      }
kind: ConfigMap
metadata:
  labels:
    socialnetwork/service: post-storage-service
  name: post-storage-service
